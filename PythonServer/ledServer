#!/usr/bin/env python

import socket
import sys
import thread
import time
import serial

# Pin Definitons:
bListen = True
PERIOD = 0.01
bRun = True
ser = serial.Serial(
    port='/dev/ttyAMA0',
    baudrate=9600
)

def connectionThread(connection, addr):
  global LED_R, LED_G, LED_B, LED_R_STATE, LED_B_STATE, LED_G_STATE, bListen, LED_R_PWM, LED_G_PWM, LED_B_PWM, ser
  try:
    received = connection.recv(200)
    print 'received: ' + received

    if received == 'LED_ON':
      print 'Turning all LEDs ON'
      ser.write('9')
      ser.write('j')
      ser.write('J')

    if received == 'LED_OFF':
      print 'Turning all LEDs OFF'
      ser.write('0')
      ser.write('a')
      ser.write('A')

    array = received.split('_')
    if len(array) == 3:
      if array[1] == 'R':
        ser.write(str(unichr(48 + int(array[2]))))
      if array[1] == 'G':
        ser.write(str(unichr(65 + int(array[2]))))
      if array[1] == 'B':
        ser.write(str(unichr(97 + int(array[2]))))

  except socket.error:
    print 'socket error'
    #print str(socket.error)
    connection.close()


def main():
    global bRun, bListen

    ledControlSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print 'Socket created'

    # Bind socket to local host and port
    try:
        ledControlSocket.bind(('', 233))
    except socket.error as msg:
        print 'Bind failed. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
        sys.exit()

    print 'Socket bind complete'

    # Start listening on socket
        ledControlSocket.listen(5)

    # now keep talking with the client
    try:
        while 1:
            # wait to accept a connection - blocking call
            conn, addr = ledControlSocket.accept()
            print 'Connected with ' + addr[0] + ':' + str(addr[1])
            #thread.start_new_thread(connectionThread, (conn,addr))

            connectionThread(conn, addr)

    except KeyboardInterrupt:
        print "Received Interrupt"
        bListen = False
        ledControlSocket.close()
        bRun = False

if __name__ == "__main__":
  main()
